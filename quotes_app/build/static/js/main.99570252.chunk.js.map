{"version":3,"sources":["redux.js","components/Home.js","components/NewAuthor.js","components/AuthorQuotes.js","components/AddQuotes.js","components/EditAuthor.js","container/QuotesParentContainer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","quotesBank","addNewQuote","quote","idx","type","payload","index","store","createStore","state","arguments","length","undefined","action","console","log","Object","objectSpread","concat","toConsumableArray","slice","test","window","__REDUX_DEVTOOLS_EXTENSION__","Home","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","axios","get","then","response","updateRedux","data","catch","error","react_default","a","createElement","react_router_dom","to","map","item","author","React","Component","connect","dispatch","updateInitialReduxStore","NewAuthor","handleChange","event","setState","defineProperty","target","name","value","cancelForm","history","push","addNewAuthor","post","authorName","status","jsonObject","id","toString","quotes","addNewAuthorToStore","onSubmit","preventDefault","htmlFor","onChange","onClick","newAuthor","AuthorQuotes","vote","quoteObject","votetype","newCounter","voteCounter","votes","assign","objectToUpdate","find","match","params","indexRedux","findIndex","updatedObject","put","editVoteOnStore","deleteQuote","quotesToDisplay","newObject","_this2","AddQuotes","authorquotesbank","newQuote","quoteToAdd","newauthorquotesbank","addNewQuoteToAuthorOnStore","EditAuthor","editAuthor","authorbank","authorIdx","updatedAuthor","addEditedAuthorToStore","newAuthordata","updateAuthor","QuotesParentContainer","className","react_router","exact","path","component","App","container_QuotesParentContainer","Boolean","location","hostname","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99570252.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nconst initialState = {\n  quotesBank: [],\n};\n\n//actions - update state on initial screen load\nexport const updateInitialReduxStore = (data) => ({\n  type: \"UPDATE_REDUX_INITIAL_LOAD\",\n  payload: data,\n});\n\n// add a new author to the redux store\nexport const addNewAuthorToRedux = (author) => ({\n  type: \"ADD_NEW_AUTHOR\",\n  payload: author,\n});\n\n//add new quote to the authors store\n//update vote\nexport const addNewQuote = (quote, idx) => ({\n  type: \"ADD_NEW_QUOTE\",\n  payload: quote,\n  index: idx,\n});\n\n//update author\nexport const updateAuthor = (data, idx) => ({\n  type: \"UPDATE_AUTHOR\",\n  payload: data,\n  index: idx,\n})\n\nexport const reducer = (state = initialState, action) => {\n  console.log(state);\n  console.log(action);\n  switch (action.type) {\n    case \"UPDATE_REDUX_INITIAL_LOAD\":\n      return {\n        ...state,\n        quotesBank: action.payload,\n      }\n    case \"ADD_NEW_AUTHOR\":\n      return {\n        ...state,\n        quotesBank: [...state.quotesBank, action.payload]\n      }\n    case \"ADD_NEW_QUOTE\":\n      return {\n        ...state,\n        quotesBank: [...state.quotesBank.slice(0, action.index),\n        state.quotesBank[action.index] = action.payload,\n        ...state.quotesBank.slice(action.index + 1)],\n      }\n    case \"UPDATE_AUTHOR\":\n      var test = {\n        ...state,\n        quotesBank: [...state.quotesBank.slice(0, action.index),\n        state.quotesBank[action.index] = action.payload,\n        ...state.quotesBank.slice(action.index + 1)\n\n        ],\n      };\n      console.log(test);\n      return {\n        ...state,\n        quotesBank: [...state.quotesBank.slice(0, action.index),\n        state.quotesBank[action.index] = action.payload,\n        ...state.quotesBank.slice(action.index + 1)\n\n        ],\n      }\n    default:\n      return state;\n  }\n\n}\n\nexport const store = createStore(\n  reducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { updateInitialReduxStore } from '../redux';\nimport axios from 'axios';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n\n  };\n  componentDidMount = () => {\n    //axios call to fetch data from MockAPI\n    //please move this call to a helper function\n    axios.get('/quotes/fetchquotes')\n      .then((response) => {\n        // push the data into redux store\n        this.props.updateRedux(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n  render() {\n    return (\n      <div>\n        <Link to=\"/new\">Add a quotable author</Link>\n        <label>We have quotes by:</label>\n        <table>\n          <tr>\n            <th>Author</th>\n            <th>Actions available</th>\n          </tr>\n          {this.props.quotesBank.map((item) => {\n            return (<tr>\n              <td>{item.author}</td>\n              <td>\n                <button>\n                  <Link to={`/quotes/${item.author}`}>View Quotes</Link>\n                </button>\n                <button>\n                  <Link to={`/edit/${item.author}`}>Edit</Link>\n                </button>\n              </td>\n            </tr>)\n          })}\n\n        </table>\n      </div>\n    )\n  }\n\n}\nconst mapStateToProps = (state) => ({\n  quotesBank: state.quotesBank,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateRedux: (data) => {\n    dispatch(updateInitialReduxStore(data))\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { addNewAuthorToRedux } from '../redux';\n\nclass NewAuthor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authorName: '',\n    };\n  };\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  cancelForm = () => {\n    // Reroute to home page when cancel button is clicked\n    this.props.history.push('/');\n  }\n\n  addNewAuthor = () => {\n    // Post this new author data to Mock API\n    //if successful add this data to the redux store\n\n    axios.post(`/quotes/postnewauthor/${this.state.authorName}`)\n      .then((response) => {\n        if (response.status === 200) {\n          // update the redux store with new Author\n          var jsonObject = {\n            id: (this.props.quotesBank.length + 1).toString(),\n            author: this.state.authorName,\n            quotes: [],\n          };\n          this.props.addNewAuthorToStore(jsonObject);\n          //change route\n          this.props.history.push('/');\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Link to=\"/\">Home</Link>\n        <label>Add a new quotable author: </label>\n        {/* input form */}\n        <form onSubmit={(event) => { event.preventDefault() }}>\n          <label htmlFor=\"authorName\">Name:</label>\n          <input name=\"authorName\" onChange={this.handleChange} value={this.state.authorName} />\n          <button onClick={this.cancelForm}>Cancel</button>\n          <button onClick={this.addNewAuthor}>Submit</button>\n        </form>\n      </div>\n\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => ({\n  quotesBank: state.quotesBank,\n\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addNewAuthorToStore: (newAuthor) => {\n    dispatch(addNewAuthorToRedux(newAuthor))\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewAuthor);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { addNewQuote } from '../redux';\n\nclass AuthorQuotes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n\n  };\n\n  vote = (quoteObject, index, votetype) => {\n    //increment or decrement vote by one\n\n    var voteCounter = quoteObject.votes;\n    var newCounter;\n    if (votetype === \"up\") {\n      newCounter = Object.assign({}, quoteObject, {\n        votes: voteCounter + 1,\n      });\n    } else {\n      newCounter = Object.assign({}, quoteObject, {\n        votes: voteCounter - 1,\n      });\n\n    }\n    var objectToUpdate = this.props.quotesBank.find((item) => item.author === this.props.match.params.id);\n    var indexRedux = this.props.quotesBank.findIndex((item) => item.author === this.props.match.params.id);\n    var updatedObject = Object.assign({}, objectToUpdate, {\n      quotes: [...objectToUpdate.quotes.slice(0, index),\n      objectToUpdate.quotes[index] = newCounter,\n      ...objectToUpdate.quotes.slice(index + 1)],\n    });\n    // axios call to Mock api to vote up\n    axios.put(`/quotes/addnewquote/${objectToUpdate.id}`, updatedObject)\n      .then((response) => {\n        console.log(response);\n        if (response.status === 200) {\n          // update the redux store with new Author\n          console.log('durga test');\n          this.props.editVoteOnStore(updatedObject, indexRedux);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n  }\n\n  //delete Vote\n  deleteQuote = (idx) => {\n    //var index = this.props.quotesBank.findIndex((item) => item.author === this.props.match.params.id);\n    console.log(\"Quote - index to delete\");\n    console.log(idx);\n    var quotesToDisplay = this.props.quotesBank.find((item) => item.author === this.props.match.params.id);\n    var authorsID = this.props.quotesBank.findIndex((item) => item.author === this.props.match.params.id);\n    console.log(\"Author - index to delete\");\n    console.log(quotesToDisplay);\n    //console.log(authorsQuoteTodelete);\n    var newObject = Object.assign({}, quotesToDisplay, {\n      quotes: [...quotesToDisplay.quotes.slice(0, idx),\n      ...quotesToDisplay.quotes.slice(idx + 1)],\n    });\n    console.log(newObject);\n    //axios call to delete Quotes\n    axios.put(`/quotes/addnewquote/${quotesToDisplay.id}`, newObject)\n      .then((response) => {\n        console.log(response);\n        // if (response.status === 200) {\n        //   // update the redux store with new Author\n        //   console.log('durga test');\n        //   this.props.editVoteOnStore(updatedObject, indexRedux);\n        // }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n\n  }\n\n  render() {\n    // refactor and place this quotes to display in state - it is being used in multiple places\n    var quotesToDisplay = this.props.quotesBank.find((item) => item.author === this.props.match.params.id);\n    console.log(quotesToDisplay);\n    return (\n      <div>\n        <Link to=\"/\">Home</Link>\n        <Link to={`/write/${this.props.match.params.id}`}>Add a quote</Link>\n        <table>\n          <tr>\n            <th>Quotes</th>\n            <th>Votes</th>\n            <th>Actions available</th>\n          </tr>\n          {quotesToDisplay.quotes.map((item, idx) => {\n            return (\n              <tr>\n                <td>{item.quote}</td>\n                <td>{item.votes}</td>\n                <td>\n                  <button onClick={() => { this.vote(item, idx, \"up\") }}>Vote up</button>\n                  <button onClick={() => { this.vote(item, idx, \"down\") }}>Vote down</button>\n                  <button onClick={() => { this.deleteQuote(idx) }}>Delete</button>\n                </td>\n              </tr>\n            )\n          })}\n\n        </table>\n\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = (state) => ({\n  quotesBank: state.quotesBank,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  editVoteOnStore: (data, idx) => {\n    dispatch(addNewQuote(data, idx))\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthorQuotes);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { addNewQuote } from '../redux';\n\nclass AddQuotes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quoteToAdd: '',\n    };\n  };\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  cancelForm = () => {\n    // Reroute to home page when cancel button is clicked\n    this.props.history.push('/');\n  }\n\n  addNewQuote = () => {\n    var authorquotesbank = this.props.quotesBank.find((item) => item.author === this.props.match.params.id);\n    var idx = this.props.quotesBank.findIndex((item) => item.author === this.props.match.params.id);\n    var newQuote = {\n      id: (authorquotesbank.quotes.length + 1).toString(),\n      quote: this.state.quoteToAdd,\n      votes: 0,\n    };\n    var newauthorquotesbank = Object.assign({}, authorquotesbank, {\n      quotes: [...authorquotesbank.quotes, newQuote],\n    });\n    // Axios call to add new quote to an author - put to edit the existing author record\n    //if successful add this data to the redux store\n\n    axios.put(`/quotes/addnewquote/${authorquotesbank.id}`, newauthorquotesbank)\n      .then((response) => {\n        console.log(response);\n        if (response.status === 200) {\n          // update the redux store with new Author\n          this.props.addNewQuoteToAuthorOnStore(newauthorquotesbank, idx);\n          //reroute to home page\n          this.props.history.push('/');\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Link to=\"/\">Home</Link>\n        <label>Provide a quote by {this.props.match.params.id}:</label>\n        {/* input form */}\n        <form onSubmit={(event) => { event.preventDefault() }}>\n          <label htmlFor=\"quoteToAdd\">Quote:</label>\n          <input name=\"quoteToAdd\" onChange={this.handleChange} value={this.state.quoteToAdd} />\n          <button onClick={this.cancelForm}>Cancel</button>\n          <button onClick={this.addNewQuote}>Submit</button>\n        </form>\n      </div>\n\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => ({\n  quotesBank: state.quotesBank,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addNewQuoteToAuthorOnStore: (quote, idx) => {\n    dispatch(addNewQuote(quote, idx))\n  },\n\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddQuotes);\n\n\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { updateAuthor } from '../redux';\n\nclass EditAuthor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authorName: '',\n    };\n  };\n\n  componentDidMount = () => {\n    this.setState({ authorName: this.props.match.params.id });\n  }\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  editAuthor = () => {\n\n    // put call - to add this modified author data to Mock API\n    //if successful add this data to the redux store\n    console.log(this.props.quotesBank);\n    var authorbank = this.props.quotesBank.find((item) => item.author === this.props.match.params.id);\n    var authorIdx = this.props.quotesBank.findIndex((item) => item.author === this.props.match.params.id);\n    console.log(authorbank);\n    var updatedAuthor = Object.assign({}, authorbank, {\n      author: this.state.authorName,\n    });\n    console.log(updatedAuthor);\n    axios.put(`/quotes/addnewquote/${authorbank.id}`, updatedAuthor)\n      .then((response) => {\n        if (response.status === 200) {\n          // update the redux store with new Author\n          this.props.addEditedAuthorToStore(updatedAuthor, authorIdx);\n          //change route\n          this.props.history.push('/');\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Link to=\"/\">Home</Link>\n        <label>Edit quotable author: </label>\n        {/* input form */}\n        <form onSubmit={(event) => { event.preventDefault() }}>\n          <label htmlFor=\"authorName\">Name:</label>\n          <input name=\"authorName\" onChange={this.handleChange} value={this.state.authorName} />\n          <button onClick={() => { this.props.history.push('/') }}>Cancel</button>\n          <button onClick={this.editAuthor}>Submit</button>\n        </form>\n      </div>\n\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => ({\n  quotesBank: state.quotesBank,\n\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addEditedAuthorToStore: (newAuthordata, idx) => {\n    dispatch(updateAuthor(newAuthordata, idx))\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditAuthor);","import React from 'react';\nimport 'react-router';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Home from '../components/Home';\nimport NewAuthor from '../components/NewAuthor';\nimport AuthorQuotes from '../components/AuthorQuotes';\nimport AddQuotes from '../components/AddQuotes';\nimport EditAuthor from '../components/EditAuthor';\nimport '../styles/quotesparentcontainer.css';\n\nclass QuotesParentContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n\n  };\n\n  render() {\n    return (\n      <div className=\"parentcontainer\">\n        <h1>Quote Ranks</h1>\n        {/* Routing */}\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/new\" component={NewAuthor} />\n          <Route path=\"/quotes/:id\" component={AuthorQuotes} />\n          <Route path=\"/write/:id\" component={AddQuotes} />\n          <Route path=\"/edit/:id\" component={EditAuthor} />\n        </Switch>\n      </div>\n    )\n  }\n\n}\nexport default QuotesParentContainer;","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport QuotesParentContainer from './container/QuotesParentContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <QuotesParentContainer />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}